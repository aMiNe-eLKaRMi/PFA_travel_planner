üß≥ Travel Planner API

This project is a simple Flask-based REST API that allows users to register, log in, and generate travel plans based on city and budget.

=========================
üöÄ Getting Started
=========================

1. Clone the repository

    git clone https://github.com/your-username/your-repo.git
    cd your-repo

2. Create and activate a virtual environment

    python -m venv venv

    - On Linux/Mac:
        source venv/bin/activate

    - On Windows:
        .\venv\Scripts\activate

3. Install dependencies

    pip install -r requirements.txt

4. Run the application

    flask run --host=0.0.0.0 --port=5000

=========================
üß™ API Endpoints (Tested with Postman)
=========================

1. üîê Authentication

a. Register

POST /api/auth/register

Headers:
    Content-Type: application/json

Body:
{
  "email": "user@example.com",
  "password": "securepassword123"
}

Success Response:
{
  "msg": "User created successfully"
}

-------------------------

b. Login

POST /api/auth/login

Headers:
    Content-Type: application/json

Body:
{
  "email": "user@example.com",
  "password": "securepassword123"
}

Success Response:
{
  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}

=========================

2. üó∫Ô∏è Plan Management

a. Initialize Plan

POST /api/plan/init

Headers:
    Content-Type: application/json
    Authorization: Bearer <JWT_TOKEN>

Body:
{
  "city": "Paris",
  "budget": 1500
}

Success Response:
{
  "plan_id": "667a1b2c3d4e5f6a7b8c9d0e",
  "hotels": [
    {
      "name": "H√¥tel Eiffel Tower",
      "address": "18 Avenue de Suffren, Paris"
    }
  ]
}

-------------------------

b. Finalize Plan

POST /api/plan/finalize

Headers:
    Content-Type: application/json
    Authorization: Bearer <JWT_TOKEN>

Body:
{
  "plan_id": "667a1b2c3d4e5f6a7b8c9d0e",
  "selected_hotel": "H√¥tel Eiffel Tower",
  "days": 5
}

Success Response:
{
  "itinerary": "üóìÔ∏è Jour 1\n08:00 - Petit-d√©jeuner √† l'h√¥tel..."
}

-------------------------

c. Delete Plan

DELETE /api/plan/<plan_id>

Headers:
    Authorization: Bearer <JWT_TOKEN>

Success Response:
{
  "msg": "Plan deleted"
}

Error Response (404):
{
  "msg": "Plan not found"
}

-------------------------

d. Get All Plans

GET /api/plan/all

Headers:
    Authorization: Bearer <JWT_TOKEN>

Success Response:
[
  {
    "_id": "667a1b2c3d4e5f6a7b8c9d0e",
    "user_id": "667a1b2c3d4e5f6a7b8c9d0f",
    "city": "Paris",
    "budget": 1500,
    "hotels": [...],
    "selected_hotel": "H√¥tel Eiffel Tower",
    "days": 5,
    "itinerary": "...",
    "created_at": "2024-06-23T10:00:00Z"
  }
]

=========================
‚ö†Ô∏è Important Notes
=========================

- Always include JWT token in Authorization header for protected routes
- MongoDB must be running locally on default port 27017
- Replace API keys in .env file with your own credentials
- For production use, disable debug mode (FLASK_DEBUG=0)